{"ast":null,"code":"var _jsxFileName = \"D:\\\\web development\\\\React.js\\\\React Complete Guide\\\\Authentication App\\\\frontend\\\\src\\\\pages\\\\Authentication.js\";\nimport { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  // 渲染认证表单组件\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\n\n// 处理认证操作的异步函数\nexport async function action({\n  request\n}) {\n  // 解析 URL 中的查询参数\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get('mode') || 'login';\n\n  // 检查认证模式是否为支持的模式\n  if (mode !== 'login' && mode !== 'signup') {\n    // 如果不是支持的模式，返回状态码为 422 的 JSON 响应\n    throw json({\n      message: 'Unsupported mode.'\n    }, {\n      status: 422\n    });\n  }\n\n  // 从请求中获取表单数据\n  const data = await request.formData();\n  // 构建认证数据对象\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password')\n  };\n\n  // 发起认证请求\n  const response = await fetch('http://localhost:8080/' + mode, {\n    method: 'POST',\n    // 使用 POST 方法\n    headers: {\n      'Content-Type': 'application/json' // 设置请求头的 Content-Type 为 JSON\n    },\n    body: JSON.stringify(authData) // 将认证数据对象转换为 JSON 格式并作为请求体发送\n  });\n\n  // 如果认证失败（状态码为 422 或 401），直接返回响应\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n\n  // 如果请求不成功，抛出一个包含错误信息的 JSON 响应\n  if (!response.ok) {\n    throw json({\n      message: 'Could not authenticate user.'\n    }, {\n      status: 500\n    });\n  }\n\n  // 如果认证成功，解析响应数据\n  const resData = await response.json();\n  const token = resData.token;\n\n  // 将认证成功后的令牌和过期时间存储到本地存储中\n  localStorage.setItem('token', token);\n  const expiration = new Date();\n  expiration.setHours(expiration.getHours() + 1);\n  localStorage.setItem('expiration', expiration.toISOString());\n\n  // 重定向到根路径\n  return redirect('/');\n}\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["json","redirect","AuthForm","jsxDEV","_jsxDEV","AuthenticationPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","searchParams","URL","url","mode","get","message","status","data","formData","authData","email","password","response","fetch","method","headers","body","JSON","stringify","ok","resData","token","localStorage","setItem","expiration","Date","setHours","getHours","toISOString","$RefreshReg$"],"sources":["D:/web development/React.js/React Complete Guide/Authentication App/frontend/src/pages/Authentication.js"],"sourcesContent":["import { json, redirect } from 'react-router-dom';\n\nimport AuthForm from '../components/AuthForm';\n\nfunction AuthenticationPage() {\n  // 渲染认证表单组件\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\n// 处理认证操作的异步函数\nexport async function action({ request }) {\n  // 解析 URL 中的查询参数\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get('mode') || 'login';\n\n  // 检查认证模式是否为支持的模式\n  if (mode !== 'login' && mode !== 'signup') {\n    // 如果不是支持的模式，返回状态码为 422 的 JSON 响应\n    throw json({ message: 'Unsupported mode.' }, { status: 422 });\n  }\n\n  // 从请求中获取表单数据\n  const data = await request.formData();\n  // 构建认证数据对象\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password'),\n  };\n\n  // 发起认证请求\n  const response = await fetch('http://localhost:8080/' + mode, {\n    method: 'POST', // 使用 POST 方法\n    headers: {\n      'Content-Type': 'application/json', // 设置请求头的 Content-Type 为 JSON\n    },\n    body: JSON.stringify(authData), // 将认证数据对象转换为 JSON 格式并作为请求体发送\n  });\n\n  // 如果认证失败（状态码为 422 或 401），直接返回响应\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n\n  // 如果请求不成功，抛出一个包含错误信息的 JSON 响应\n  if (!response.ok) {\n    throw json({ message: 'Could not authenticate user.' }, { status: 500 });\n  }\n\n  // 如果认证成功，解析响应数据\n  const resData = await response.json();\n  const token = resData.token;\n\n  // 将认证成功后的令牌和过期时间存储到本地存储中\n  localStorage.setItem('token', token);\n  const expiration = new Date();\n  expiration.setHours(expiration.getHours() + 1);\n  localStorage.setItem('expiration', expiration.toISOString());\n\n  // 重定向到根路径\n  return redirect('/');\n}\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AAEjD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,kBAAkBA,CAAA,EAAG;EAC5B;EACA,oBAAOD,OAAA,CAACF,QAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrB;AAACC,EAAA,GAHQL,kBAAkB;AAK3B,eAAeA,kBAAkB;;AAEjC;AACA,OAAO,eAAeM,MAAMA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EACxC;EACA,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACF,YAAY;EACtD,MAAMG,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO;;EAEhD;EACA,IAAID,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,EAAE;IACzC;IACA,MAAMhB,IAAI,CAAC;MAAEkB,OAAO,EAAE;IAAoB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAC/D;;EAEA;EACA,MAAMC,IAAI,GAAG,MAAMR,OAAO,CAACS,QAAQ,CAAC,CAAC;EACrC;EACA,MAAMC,QAAQ,GAAG;IACfC,KAAK,EAAEH,IAAI,CAACH,GAAG,CAAC,OAAO,CAAC;IACxBO,QAAQ,EAAEJ,IAAI,CAACH,GAAG,CAAC,UAAU;EAC/B,CAAC;;EAED;EACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAAGV,IAAI,EAAE;IAC5DW,MAAM,EAAE,MAAM;IAAE;IAChBC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB,CAAE;IACtC,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ,CAAC,CAAE;EAClC,CAAC,CAAC;;EAEF;EACA,IAAIG,QAAQ,CAACN,MAAM,KAAK,GAAG,IAAIM,QAAQ,CAACN,MAAM,KAAK,GAAG,EAAE;IACtD,OAAOM,QAAQ;EACjB;;EAEA;EACA,IAAI,CAACA,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMhC,IAAI,CAAC;MAAEkB,OAAO,EAAE;IAA+B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAC1E;;EAEA;EACA,MAAMc,OAAO,GAAG,MAAMR,QAAQ,CAACzB,IAAI,CAAC,CAAC;EACrC,MAAMkC,KAAK,GAAGD,OAAO,CAACC,KAAK;;EAE3B;EACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACpC,MAAMG,UAAU,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC7BD,UAAU,CAACE,QAAQ,CAACF,UAAU,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC9CL,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,UAAU,CAACI,WAAW,CAAC,CAAC,CAAC;;EAE5D;EACA,OAAOxC,QAAQ,CAAC,GAAG,CAAC;AACtB;AAAC,IAAAS,EAAA;AAAAgC,YAAA,CAAAhC,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}