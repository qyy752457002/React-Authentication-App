{"ast":null,"code":"var _jsxFileName = \"D:\\\\web development\\\\React.js\\\\React Complete Guide\\\\Authentication App\\\\frontend\\\\src\\\\App.js\";\n// 引入必要的React Router DOM组件和函数\nimport { RouterProvider, createBrowserRouter } from 'react-router-dom';\n\n// 引入页面组件和相关的loader和action\nimport EditEventPage from './pages/EditEvent';\nimport ErrorPage from './pages/Error';\nimport EventDetailPage, { loader as eventDetailLoader, action as deleteEventAction } from './pages/EventDetail';\nimport EventsPage, { loader as eventsLoader } from './pages/Events';\nimport EventsRootLayout from './pages/EventsRoot';\nimport HomePage from './pages/Home';\nimport NewEventPage from './pages/NewEvent';\nimport RootLayout from './pages/Root';\nimport { action as manipulateEventAction } from './components/EventForm';\nimport NewsletterPage, { action as newsletterAction } from './pages/Newsletter';\nimport AuthenticationPage, { action as authAction } from './pages/Authentication';\nimport { action as logoutAction } from './pages/Logout';\nimport { checkAuthLoader, tokenLoader } from './util/auth';\n\n// 使用createBrowserRouter创建一个路由配置\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: '/',\n  // 根路由\n  element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 14\n  }, this),\n  // 根路由对应的元素\n  errorElement: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 19\n  }, this),\n  // 发生错误时显示的元素\n  id: 'root',\n  // 路由的唯一标识\n  loader: tokenLoader,\n  // 在进入路由前执行的loader，用于预加载数据或执行认证等\n  children: [\n  // 子路由配置\n  {\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 31\n    }, this)\n  },\n  // 首页路由配置\n\n  // ---------------------------------------------------------------\n\n  {\n    path: 'events',\n    // 事件相关页面的基路由\n    element: /*#__PURE__*/_jsxDEV(EventsRootLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 18\n    }, this),\n    // 包装事件相关页面的布局组件\n    children: [\n    // 事件页面的子路由\n    {\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 22\n      }, this),\n      loader: eventsLoader // 加载事件列表的loader\n    }, {\n      path: ':eventId',\n      // 事件详情页路由，:eventId为动态参数\n      id: 'event-detail',\n      loader: eventDetailLoader,\n      // 加载事件详情的loader\n      children: [{\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 26\n        }, this),\n        // 事件详情页组件\n        action: deleteEventAction // 删除事件的action\n      }, {\n        path: 'edit',\n        // 事件编辑页路由\n        element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 26\n        }, this),\n        action: manipulateEventAction,\n        // 编辑事件的action\n        loader: checkAuthLoader // 检查是否认证的loader\n      }]\n    }, {\n      path: 'new',\n      // 新增事件页路由\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 22\n      }, this),\n      action: manipulateEventAction,\n      // 新增事件的action\n      loader: checkAuthLoader // 检查是否认证的loader\n    }]\n  },\n  // ---------------------------------------------------------------\n\n  {\n    path: 'auth',\n    // 认证页面路由\n    element: /*#__PURE__*/_jsxDEV(AuthenticationPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 18\n    }, this),\n    action: authAction // 认证的action\n  }, {\n    path: 'newsletter',\n    // 订阅通讯页面路由\n    element: /*#__PURE__*/_jsxDEV(NewsletterPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 18\n    }, this),\n    action: newsletterAction // 订阅通讯的action\n  }, {\n    path: 'logout',\n    // 注销操作的路由\n    action: logoutAction // 执行注销的action\n  }]\n}]);\n\n// App组件，使用RouterProvider包装整个应用\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["RouterProvider","createBrowserRouter","EditEventPage","ErrorPage","EventDetailPage","loader","eventDetailLoader","action","deleteEventAction","EventsPage","eventsLoader","EventsRootLayout","HomePage","NewEventPage","RootLayout","manipulateEventAction","NewsletterPage","newsletterAction","AuthenticationPage","authAction","logoutAction","checkAuthLoader","tokenLoader","jsxDEV","_jsxDEV","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","errorElement","id","children","index","App","_c","$RefreshReg$"],"sources":["D:/web development/React.js/React Complete Guide/Authentication App/frontend/src/App.js"],"sourcesContent":["// 引入必要的React Router DOM组件和函数\nimport { RouterProvider, createBrowserRouter } from 'react-router-dom';\n\n// 引入页面组件和相关的loader和action\nimport EditEventPage from './pages/EditEvent';\nimport ErrorPage from './pages/Error';\nimport EventDetailPage, {\n  loader as eventDetailLoader,\n  action as deleteEventAction,\n} from './pages/EventDetail';\nimport EventsPage, { loader as eventsLoader } from './pages/Events';\nimport EventsRootLayout from './pages/EventsRoot';\nimport HomePage from './pages/Home';\nimport NewEventPage from './pages/NewEvent';\nimport RootLayout from './pages/Root';\nimport { action as manipulateEventAction } from './components/EventForm';\nimport NewsletterPage, { action as newsletterAction } from './pages/Newsletter';\nimport AuthenticationPage, {\n  action as authAction,\n} from './pages/Authentication';\nimport { action as logoutAction } from './pages/Logout';\nimport { checkAuthLoader, tokenLoader } from './util/auth';\n\n// 使用createBrowserRouter创建一个路由配置\nconst router = createBrowserRouter([\n  {\n    path: '/', // 根路由\n    element: <RootLayout />, // 根路由对应的元素\n    errorElement: <ErrorPage />, // 发生错误时显示的元素\n    id: 'root', // 路由的唯一标识\n    loader: tokenLoader, // 在进入路由前执行的loader，用于预加载数据或执行认证等\n    children: [ // 子路由配置\n      { index: true, element: <HomePage /> }, // 首页路由配置\n\n      // ---------------------------------------------------------------\n\n      {\n        path: 'events', // 事件相关页面的基路由\n        element: <EventsRootLayout />, // 包装事件相关页面的布局组件\n        children: [ // 事件页面的子路由\n          {\n            index: true,\n            element: <EventsPage />,\n            loader: eventsLoader, // 加载事件列表的loader\n          },\n\n          {\n            path: ':eventId', // 事件详情页路由，:eventId为动态参数\n            id: 'event-detail',\n            loader: eventDetailLoader, // 加载事件详情的loader\n            children: [\n              {\n                index: true,\n                element: <EventDetailPage />, // 事件详情页组件\n                action: deleteEventAction, // 删除事件的action\n              },\n\n              {\n                path: 'edit', // 事件编辑页路由\n                element: <EditEventPage />,\n                action: manipulateEventAction, // 编辑事件的action\n                loader: checkAuthLoader, // 检查是否认证的loader\n              },\n              \n            ],\n          },\n\n          {\n            path: 'new', // 新增事件页路由\n            element: <NewEventPage />,\n            action: manipulateEventAction, // 新增事件的action\n            loader: checkAuthLoader, // 检查是否认证的loader\n          },\n        ],\n      },\n\n      // ---------------------------------------------------------------\n\n      {\n        path: 'auth', // 认证页面路由\n        element: <AuthenticationPage />,\n        action: authAction, // 认证的action\n      },\n\n      {\n        path: 'newsletter', // 订阅通讯页面路由\n        element: <NewsletterPage />,\n        action: newsletterAction, // 订阅通讯的action\n      },\n\n      {\n        path: 'logout', // 注销操作的路由\n        action: logoutAction, // 执行注销的action\n      },\n\n    ],\n  },\n]);\n\n// App组件，使用RouterProvider包装整个应用\nfunction App() {\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}