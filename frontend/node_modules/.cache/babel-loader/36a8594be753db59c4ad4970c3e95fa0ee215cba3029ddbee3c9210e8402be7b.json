{"ast":null,"code":"var _jsxFileName = \"D:\\\\web development\\\\React.js\\\\React Complete Guide\\\\Authentication App\\\\frontend\\\\src\\\\pages\\\\EventsRoot.js\",\n  _s = $RefreshSig$();\nimport { Suspense } from 'react';\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  // 使用 useLoaderData() 从路由加载数据\n  const {\n    events\n  } = useLoaderData();\n  return (\n    /*#__PURE__*/\n    // 使用 Suspense 组件处理数据加载过程中的等待状态\n    _jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 25\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: events,\n        children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n          events: loadedEvents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 28\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\n\n// 异步加载事件数据的函数\nasync function loadEvents() {\n  // 发起网络请求获取事件数据\n  const response = await fetch('http://localhost:8080/events');\n\n  // 如果网络请求不成功，抛出一个包含错误信息的 Response 对象\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    // 如果网络请求成功，解析响应数据并返回事件数组\n    const resData = await response.json();\n    return resData.events;\n  }\n}\n\n// 加载器函数，用于从服务器获取数据\nexport function loader() {\n  // 使用 defer 函数延迟加载事件数据\n  return defer({\n    events: loadEvents() // 调用 loadEvents 函数获取事件数据\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Suspense","useLoaderData","json","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","fallback","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvents","_c","loadEvents","response","fetch","ok","message","status","resData","loader","$RefreshReg$"],"sources":["D:/web development/React.js/React Complete Guide/Authentication App/frontend/src/pages/EventsRoot.js"],"sourcesContent":["import { Suspense } from 'react';\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n  // 使用 useLoaderData() 从路由加载数据\n  const { events } = useLoaderData();\n\n  return (\n    // 使用 Suspense 组件处理数据加载过程中的等待状态\n    <Suspense fallback={<p style={{ textAlign: 'center' }}>Loading...</p>}>\n      {/* 使用 Await 组件等待数据加载完成 */}\n      <Await resolve={events}>\n        {/* 当数据加载完成后，渲染 EventsList 组件 */}\n        {(loadedEvents) => <EventsList events={loadedEvents} />}\n      </Await>\n    </Suspense>\n  );\n}\n\nexport default EventsPage;\n\n// 异步加载事件数据的函数\nasync function loadEvents() {\n  // 发起网络请求获取事件数据\n  const response = await fetch('http://localhost:8080/events');\n\n  // 如果网络请求不成功，抛出一个包含错误信息的 Response 对象\n  if (!response.ok) {\n    throw json(\n      { message: 'Could not fetch events.' },\n      {\n        status: 500,\n      }\n    );\n  } else {\n    // 如果网络请求成功，解析响应数据并返回事件数组\n    const resData = await response.json();\n    return resData.events;\n  }\n}\n\n// 加载器函数，用于从服务器获取数据\nexport function loader() {\n  // 使用 defer 函数延迟加载事件数据\n  return defer({\n    events: loadEvents(), // 调用 loadEvents 函数获取事件数据\n  });\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAEpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB;EACA,MAAM;IAAEC;EAAO,CAAC,GAAGT,aAAa,CAAC,CAAC;EAElC;IAAA;IACE;IACAM,OAAA,CAACP,QAAQ;MAACW,QAAQ,eAAEJ,OAAA;QAAGK,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAS,CAAE;QAAAC,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAE;MAAAJ,QAAA,eAEpEP,OAAA,CAACH,KAAK;QAACe,OAAO,EAAET,MAAO;QAAAI,QAAA,EAEnBM,YAAY,iBAAKb,OAAA,CAACF,UAAU;UAACK,MAAM,EAAEU;QAAa;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;AAEf;AAACT,EAAA,CAdQD,UAAU;EAAA,QAEEP,aAAa;AAAA;AAAAoB,EAAA,GAFzBb,UAAU;AAgBnB,eAAeA,UAAU;;AAEzB;AACA,eAAec,UAAUA,CAAA,EAAG;EAC1B;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;;EAE5D;EACA,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMvB,IAAI,CACR;MAAEwB,OAAO,EAAE;IAA0B,CAAC,EACtC;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL;IACA,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACrB,IAAI,CAAC,CAAC;IACrC,OAAO0B,OAAO,CAAClB,MAAM;EACvB;AACF;;AAEA;AACA,OAAO,SAASmB,MAAMA,CAAA,EAAG;EACvB;EACA,OAAO1B,KAAK,CAAC;IACXO,MAAM,EAAEY,UAAU,CAAC,CAAC,CAAE;EACxB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}