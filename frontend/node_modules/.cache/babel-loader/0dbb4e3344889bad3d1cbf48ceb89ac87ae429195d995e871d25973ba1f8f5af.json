{"ast":null,"code":"var _jsxFileName = \"D:\\\\web development\\\\React.js\\\\React Complete Guide\\\\Authentication App\\\\frontend\\\\src\\\\pages\\\\EventDetail.js\",\n  _s = $RefreshSig$();\nimport { Suspense } from 'react';\nimport { useRouteLoaderData, json, redirect, defer, Await } from 'react-router-dom';\nimport EventItem from '../components/EventItem';\nimport EventsList from '../components/EventsList';\nimport { getAuthToken } from '../util/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventDetailPage() {\n  _s();\n  // 使用 useRouteLoaderData() 从路由加载数据，获取事件详情和事件列表\n  const {\n    event,\n    events\n  } = useRouteLoaderData('event-detail');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: event,\n        children: loadedEvent => /*#__PURE__*/_jsxDEV(EventItem, {\n          event: loadedEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: events,\n        children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n          events: loadedEvents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 30\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(EventDetailPage, \"RYHFM3+vnAtCT3vK8ii1+i0+Nsk=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\n\n// 异步加载事件详情的函数\nasync function loadEvent(id) {\n  // 发起网络请求获取指定 id 的事件详情\n  const response = await fetch('http://localhost:8080/events/' + id);\n\n  // 如果网络请求不成功，抛出一个包含错误信息的 Response 对象\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event.'\n    },\n    // 错误消息对象\n    {\n      status: 500\n    } // 错误状态码\n    );\n  } else {\n    // 如果网络请求成功，解析响应数据并返回事件详情\n    const resData = await response.json();\n    return resData.event;\n  }\n}\n\n// 异步加载事件列表的函数\nasync function loadEvents() {\n  // 发起网络请求获取事件列表\n  const response = await fetch('http://localhost:8080/events');\n\n  // 如果网络请求不成功，抛出一个包含错误信息的 Response 对象\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch events.'\n    },\n    // 错误消息对象\n    {\n      status: 500\n    } // 错误状态码\n    );\n  } else {\n    // 如果网络请求成功，解析响应数据并返回事件列表\n    const resData = await response.json();\n    return resData.events;\n  }\n}\n\n// 加载器函数，用于从服务器获取数据\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n\n  // 使用 defer 函数延迟加载事件详情和事件列表数据\n  return defer({\n    event: await loadEvent(id),\n    // 调用 loadEvent 函数获取事件详情数据\n    events: loadEvents() // 调用 loadEvents 函数获取事件列表数据\n  });\n}\n\n// 动作函数，用于处理请求，例如删除事件\nexport async function action({\n  params,\n  request\n}) {\n  const eventId = params.eventId;\n\n  // 获取用户身份验证令牌\n  const token = getAuthToken();\n\n  // 发起请求删除指定 id 的事件\n  const response = await fetch('http://localhost:8080/events/' + eventId, {\n    method: request.method,\n    // 使用请求对象的方法\n    headers: {\n      'Authorization': 'Bearer ' + token // 设置请求头中的身份验证令牌\n    }\n  });\n\n  // 如果请求不成功，抛出一个包含错误信息的 Response 对象\n  if (!response.ok) {\n    throw json({\n      message: 'Could not delete event.'\n    },\n    // 错误消息对象\n    {\n      status: 500\n    } // 错误状态码\n    );\n  }\n\n  // 如果请求成功，重定向到 '/events' 路径\n  return redirect('/events');\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["Suspense","useRouteLoaderData","json","redirect","defer","Await","EventItem","EventsList","getAuthToken","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","event","events","children","fallback","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvent","loadedEvents","_c","loadEvent","id","response","fetch","ok","message","status","resData","loadEvents","loader","request","params","eventId","action","token","method","headers","$RefreshReg$"],"sources":["D:/web development/React.js/React Complete Guide/Authentication App/frontend/src/pages/EventDetail.js"],"sourcesContent":["import { Suspense } from 'react';\nimport {\n  useRouteLoaderData,\n  json,\n  redirect,\n  defer,\n  Await,\n} from 'react-router-dom';\n\nimport EventItem from '../components/EventItem';\nimport EventsList from '../components/EventsList';\nimport { getAuthToken } from '../util/auth';\n\nfunction EventDetailPage() {\n  // 使用 useRouteLoaderData() 从路由加载数据，获取事件详情和事件列表\n  const { event, events } = useRouteLoaderData('event-detail');\n\n  return (\n    <>\n      {/* 使用 Suspense 组件处理数据加载过程中的等待状态 */}\n      <Suspense fallback={<p style={{ textAlign: 'center' }}>Loading...</p>}>\n        {/* 使用 Await 组件等待事件详情数据加载完成 */}\n        <Await resolve={event}>\n          {/* 当事件详情数据加载完成后，渲染 EventItem 组件 */}\n          {(loadedEvent) => <EventItem event={loadedEvent} />}\n        </Await>\n      </Suspense>\n      {/* 使用 Suspense 组件处理数据加载过程中的等待状态 */}\n      <Suspense fallback={<p style={{ textAlign: 'center' }}>Loading...</p>}>\n        {/* 使用 Await 组件等待事件列表数据加载完成 */}\n        <Await resolve={events}>\n          {/* 当事件列表数据加载完成后，渲染 EventsList 组件 */}\n          {(loadedEvents) => <EventsList events={loadedEvents} />}\n        </Await>\n      </Suspense>\n    </>\n  );\n}\n\nexport default EventDetailPage;\n\n// 异步加载事件详情的函数\nasync function loadEvent(id) {\n  // 发起网络请求获取指定 id 的事件详情\n  const response = await fetch('http://localhost:8080/events/' + id);\n\n  // 如果网络请求不成功，抛出一个包含错误信息的 Response 对象\n  if (!response.ok) {\n    throw json(\n      { message: 'Could not fetch details for selected event.' }, // 错误消息对象\n      { status: 500 } // 错误状态码\n    );\n  } else {\n    // 如果网络请求成功，解析响应数据并返回事件详情\n    const resData = await response.json();\n    return resData.event;\n  }\n}\n\n// 异步加载事件列表的函数\nasync function loadEvents() {\n  // 发起网络请求获取事件列表\n  const response = await fetch('http://localhost:8080/events');\n\n  // 如果网络请求不成功，抛出一个包含错误信息的 Response 对象\n  if (!response.ok) {\n    throw json(\n      { message: 'Could not fetch events.' }, // 错误消息对象\n      { status: 500 } // 错误状态码\n    );\n  } else {\n    // 如果网络请求成功，解析响应数据并返回事件列表\n    const resData = await response.json();\n    return resData.events;\n  }\n}\n\n// 加载器函数，用于从服务器获取数据\nexport async function loader({ request, params }) {\n  const id = params.eventId;\n\n  // 使用 defer 函数延迟加载事件详情和事件列表数据\n  return defer({\n    event: await loadEvent(id), // 调用 loadEvent 函数获取事件详情数据\n    events: loadEvents(), // 调用 loadEvents 函数获取事件列表数据\n  });\n}\n\n// 动作函数，用于处理请求，例如删除事件\nexport async function action({ params, request }) {\n  const eventId = params.eventId;\n\n  // 获取用户身份验证令牌\n  const token = getAuthToken();\n\n  // 发起请求删除指定 id 的事件\n  const response = await fetch('http://localhost:8080/events/' + eventId, {\n    method: request.method, // 使用请求对象的方法\n    headers: {\n      'Authorization': 'Bearer ' + token // 设置请求头中的身份验证令牌\n    }\n  });\n\n  // 如果请求不成功，抛出一个包含错误信息的 Response 对象\n  if (!response.ok) {\n    throw json(\n      { message: 'Could not delete event.' }, // 错误消息对象\n      { status: 500 } // 错误状态码\n    );\n  }\n\n  // 如果请求成功，重定向到 '/events' 路径\n  return redirect('/events');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}